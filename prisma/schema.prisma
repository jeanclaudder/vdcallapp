// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  creatAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profilId String
  profile Profile @relation(fields: [profilId], references: [id], onDelete: Cascade )
  members Member[]
  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profilId])
}
  enum MemberRole{
    ADMIN
    MODDERATOR
    GUEST
  }
  model Member {
    id String @id @default(uuid())
    role MemberRole @default(GUEST)

    profileId String
    profile Profile @relation(fields: [profileId],references: [id] ,onDelete:Cascade )
    serverId String
    server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
    messages Message[]
    directMessage DirectMessage[]
    conversationInitiated Conversation[] @relation("MemberOne")
    conversationReciver  Conversation[] @relation("MemberTow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([profileId])
    @@index([serverId])

  }
  enum ChannelType{
    TEXT
    AUDIO
    VIDEO
  }
  model Channel{
    id String @id @default(uuid())
    name String
    type ChannelType @default(TEXT)

    profileId  String
    profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

    serverId String
    server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
    messages Message[]
     createAt DateTime @default(now())
     updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])

    
  }
  model Message {
    id String @id @default(uuid())
    content String @db.Text

    fileUrl String? @db.Text
    
    memberId String
    member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
    
    channelId String 
    channel Channel @relation(fields: [channelId],references: [id],onDelete: Cascade)

    deleted Boolean @default(false)
   
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
    @@index([channelId])
    @@index([memberId])
  }
  model Conversation{
     id String @id @default(uuid())
      memberOneId String 
      memberOne Member @relation("MemberOne",fields: [memberOneId],references: [id],onDelete: Cascade)
      memberTowId String
      memberTow Member @relation("MemberTow",fields: [memberTowId],references: [id],onDelete: Cascade)
      @@index([memberOneId])
      @@index([memberTowId])
      directMessage DirectMessage[]
      @@unique([memberOneId,memberTowId])
    }

    model DirectMessage{
      id String @id @default(uuid())
      content String @db.Text
      fileUrl String? @db.Text

      memberId String
      member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

      conversationId String
      conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade)
     
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
     deleted Boolean @default(false)

     @@index([memberId])
     @@index([conversationId])
    }
